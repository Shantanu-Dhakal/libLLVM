name: Push → Discussion (gh cli)

on:
  push:
    branches: ['**']
  workflow_dispatch: {}

permissions:
  contents: read
  discussions: write

env:
  DISCUSSIONS_CATEGORY: Push Updates

jobs:
  post:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # gh uses this
    steps:
      - name: Build title and body from push payload
        id: build
        run: |
          set -euo pipefail

          EV="$GITHUB_EVENT_PATH"

          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"

          BRANCH="$(jq -r '.ref' "$EV" | sed 's#^refs/heads/##')"
          [ -z "$BRANCH" ] && BRANCH="(unknown)"

          PUSHER="$(jq -r '.pusher.name // .sender.login // "unknown"' "$EV")"

          BEFORE="$(jq -r '.before' "$EV")"
          AFTER="$(jq -r '.after' "$EV")"
          COMPARE="$(jq -r '.compare // empty' "$EV")"
          if [ -z "$COMPARE" ]; then
            COMPARE="https://github.com/${OWNER}/${REPO}/compare/${BEFORE}...${AFTER}"
          fi

          COMMIT_COUNT="$(jq -r '.commits | length' "$EV")"

          # Commit list (first line of message, author, link)
          COMMITS_MD="$(jq -r '
            if (.commits | length) == 0 then
              ""
            else
              [.commits[]
                | "- [`\(.id[0:7])`](\(.url)) \((.message // "" ) | split("\n")[0]) — _\(.author.name // "unknown")_"
              ] | join("\n")
            end
          ' "$EV")"

          TITLE="Push to ${BRANCH} by ${PUSHER} — ${COMMIT_COUNT} commit"
          [ "$COMMIT_COUNT" -ne 1 ] && TITLE="${TITLE}s"

          {
            echo "> _This discussion was created automatically by GitHub Actions from a \`push\` event._"
            echo
            echo "**Branch:** \`${BRANCH}\`"
            echo "**Pusher:** ${PUSHER}"
            echo "**Compare:** ${COMPARE}"
            echo
            echo "### Commits"
            if [ -n "$COMMITS_MD" ]; then
              echo "$COMMITS_MD"
            else
              echo "_No commit details available._"
            fi
            echo
            echo "<sub>— end of automated log —</sub>"
          } > body.md

          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Resolve repo & category IDs via GraphQL
        id: ids
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"

          # Query repo info + categories
          RESP="$(gh api graphql -f query='
            query($owner:String!, $name:String!){
              repository(owner:$owner, name:$name){
                id
                hasDiscussionsEnabled
                discussionCategories(first:50){
                  nodes{ id name }
                }
              }
            }' -f owner="$OWNER" -f name="$REPO")"

          REPO_ID="$(echo "$RESP" | jq -r '.data.repository.id')"
          DISC_ENABLED="$(echo "$RESP" | jq -r '.data.repository.hasDiscussionsEnabled')"
          [ "$DISC_ENABLED" != "true" ] && { echo "Discussions not enabled"; exit 1; }

          CAT_NAME="${DISCUSSIONS_CATEGORY}"
          CAT_ID="$(echo "$RESP" | jq -r --arg n "$CAT_NAME" '
            .data.repository.discussionCategories.nodes[]
            | select((.name|ascii_downcase)==($n|ascii_downcase))
            | .id
          ')"

          if [ -z "$CAT_ID" ]; then
            echo "Available categories:"
            echo "$RESP" | jq -r '.data.repository.discussionCategories.nodes[].name'
            echo "Category \"$CAT_NAME\" not found."
            exit 1
          fi

          echo "repo_id=$REPO_ID" >> $GITHUB_OUTPUT
          echo "cat_id=$CAT_ID" >> $GITHUB_OUTPUT

      - name: Create discussion
        run: |
          set -euo pipefail
          TITLE="${{ steps.build.outputs.title }}"
          REPO_ID="${{ steps.ids.outputs.repo_id }}"
          CAT_ID="${{ steps.ids.outputs.cat_id }}"
          BODY_CONTENT="$(cat body.md)"

          gh api graphql \
            -f query='
              mutation($repoId:ID!, $catId:ID!, $title:String!, $body:String!){
                createDiscussion(input:{
                  repositoryId:$repoId,
                  categoryId:$catId,
                  title:$title,
                  body:$body
                }){
                  discussion{ url }
                }
              }' \
            -f repoId="$REPO_ID" \
            -f catId="$CAT_ID" \
            -f title="$TITLE" \
            -f body="$BODY_CONTENT" \
            --jq '.data.createDiscussion.discussion.url'
